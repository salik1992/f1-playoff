{"version":3,"sources":["controllers/index.ts","components/Footer.tsx","components/Header.tsx","data/paths.ts","data/seasons/1991.csv","data/seasons/1992.csv","data/seasons/1993.csv","data/seasons/1994.csv","data/seasons/1995.csv","data/seasons/1996.csv","data/seasons/1997.csv","data/seasons/1998.csv","data/seasons/1999.csv","data/seasons/2000.csv","data/seasons/2001.csv","data/seasons/2002.csv","data/seasons/2003.csv","data/seasons/2004.csv","data/seasons/2005.csv","data/seasons/2006.csv","data/seasons/2007.csv","data/seasons/2008.csv","data/seasons/2009.csv","data/seasons/2010.csv","data/seasons/2011.csv","data/seasons/2012.csv","data/seasons/2013.csv","data/seasons/2014.csv","data/seasons/2015.csv","data/seasons/2016.csv","data/seasons/2017.csv","data/seasons/2018.csv","data/seasons/2019.csv","data/seasons/2020.csv","data/parser.ts","data/loader.ts","controllers/utils.ts","controllers/SeasonControllerBase.ts","controllers/F1Classic.ts","controllers/constants.ts","controllers/SeasonControllerPlayoffBase.ts","controllers/F1PlayOff.ts","controllers/NascarPlayOff.ts","components/SeasonPicker.tsx","components/Texts.tsx","components/InfoF1Playoff.tsx","components/InfoNascarPlayoff.tsx","components/Intro.tsx","components/Driver.tsx","components/DriversGroup.tsx","components/SeasonRunner.tsx","components/App.tsx","index.tsx"],"names":["Controllers","FooterWrap","styled","div","Footer","href","HeaderWrap","Header","to","PATHS","getValues","compose","filter","_","index","split","getResults","map","result","Number","isNaN","parseInt","driverLineToDriver","line","name","results","finishesCount","position","points","pointsFromLastRace","isInPlayOff","playOffPoints","playOffFinishesCount","parseSeason","csv","yearLine","pointsLine","racesLine","halfPointsLine","fastestLapPointLine","driversLines","year","awardedPoints","forEach","races","halfPoints","text","fastestLapPoints","drivers","loadSeason","seasonYear","a","fetch","wait","time","Promise","resolve","setTimeout","positionDrivers","orderedDrivers","sort","driverA","driverB","areBothInPlayoffs","finishesAtPlace","length","orderDrivers","driver","indexOf","getRegularDrivers","getPlayOffDrivers","SeasonControllerBase","season","currentRace","setters","setRaceIndex","destructed","this","race","pointsMultiplier","raceIndex","pointsForRace","processRegularSeasonDriver","F1Classic","addPoints","advanceRace","SeasonControllerPlayoffBase","playoffStage","playoffStages","advancePlayoffs","currentPlayofStage","at","advanceDriversToPlayoff","cutoff","cutoffPosition","PLAYOFF_1","PLAYOFF_2","PLAYOFF_3","F1PlayOff","NascarPlayOff","SEASONS","reverse","Object","keys","TEXTS","F1_CLASSIC","F1_PLAYOFF","NASCAR_PLAYOFF","Wrapper","SeasonPicker","propsSeason","propsChampionshipStyle","championshipStyle","useParams","initialSeason","initialChampionshipStyle","useState","setSeason","setChampionshipStyle","value","onChange","e","target","controller","LINE_HEIGHT","H1","h1","H2","h2","P","p","Ul","ul","Li","li","InfoF1Playoff","InfoNascarPlayoff","Intro","DriverWrap","DriverView","offsetIndex","isInPlayoff","playoffRunners","style","transform","className","DriversGroup","offset","ResultsWrap","driversLength","SeasonRunner","setController","regularDrivers","playoffDrivers","isPlayoffRunning","raceState","setRaceState","useEffect","destruct","init","getRace","isPlayOffRunning","type","getController","Wrap","Styles","createGlobalStyle","App","path","component","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8c53f6e.chunk.js","sourcesContent":["import { F1Classic } from './F1Classic';\nimport { F1PlayOff } from './F1PlayOff';\nimport { NascarPlayOff } from './NascarPlayOff';\nimport { SeasonController } from './interface';\n\nexport enum Controllers {\n    F1_CLASSIC = 'F1_CLASSIC',\n    F1_PLAYOFF = 'F1_PLAYOFF',\n    NASCAR_PLAYOFF = 'NASCAR_PLAYOFF',\n}\n\nexport const getController = (type: Controllers): SeasonController => {\n    switch (type) {\n        case Controllers.F1_CLASSIC: return new F1Classic();\n        case Controllers.F1_PLAYOFF: return new F1PlayOff();\n        case Controllers.NASCAR_PLAYOFF: return new NascarPlayOff();\n    }\n}\n","import styled from 'styled-components';\n\nconst HEIGHT = 50;\n\nconst FooterWrap = styled.div`\n    position: fixed;\n    bottom: 0;\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: space-between;\n    width: 100%;\n    min-height: ${HEIGHT}px;\n    line-height: ${HEIGHT}px;\n    margin-top: 20px;\n    color: #ffffff;\n    background-color: #222222;\n    background-image: linear-gradient(to bottom, #333333, #111111);\n    border-top: 1px solid #000000;\n    box-shadow: 0 0 5px 0 #222222;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    \n    a {\n        color: #ffffff;\n        text-decoration: none;\n    }\n    \n    div {\n        margin: 0 20px;\n    }\n    \n    div:nth-child(1) {\n        text-align: left;\n    }\n    \n    div:nth-child(2) {\n        text-align: center;\n    }\n    \n    div:nth-child(3) {\n        text-align: right;\n    }\n`;\n\nexport const Footer = () => (\n    <FooterWrap>\n        <div>\n            <a href=\"https://twitter.com/@VitSalomon\">\n                Created by: @VitSalomon\n            </a>\n        </div>\n        <div>\n            <a href=\"https://github.com/salik1992/f1-playoff\">\n                Code at: github.com/salik1992/f1-playoff\n            </a>\n        </div>\n        <div>\n             CC BY 4.0\n        </div>\n    </FooterWrap>\n);\n\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst HEIGHT = 50;\n\nconst HeaderWrap = styled.div`\n    width: 100%;\n    height: ${HEIGHT}px;\n    line-height: ${HEIGHT}px;\n    margin-bottom: 20px;\n    color: #ffffff;\n    background-color: #222222;\n    background-image: linear-gradient(to bottom, #333333, #111111);\n    border-bottom: 1px solid #000000;\n    box-shadow: 0 0 5px 0 #222222;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    \n    a {\n        margin: 0 20px;\n        color: #ffffff;\n        text-decoration: none;\n    }\n`;\n\nexport const Header = () => (\n    <HeaderWrap>\n        <Link to=\"/\">\n            What if F1 used a play-off scoring system\n        </Link>\n    </HeaderWrap>\n);\n","/// <reference path=\"paths.d.ts\" />\n\nimport s1991 from './seasons/1991.csv';\nimport s1992 from './seasons/1992.csv';\nimport s1993 from './seasons/1993.csv';\nimport s1994 from './seasons/1994.csv';\nimport s1995 from './seasons/1995.csv';\nimport s1996 from './seasons/1996.csv';\nimport s1997 from './seasons/1997.csv';\nimport s1998 from './seasons/1998.csv';\nimport s1999 from './seasons/1999.csv';\nimport s2000 from './seasons/2000.csv';\nimport s2001 from './seasons/2001.csv';\nimport s2002 from './seasons/2002.csv';\nimport s2003 from './seasons/2003.csv';\nimport s2004 from './seasons/2004.csv';\nimport s2005 from './seasons/2005.csv';\nimport s2006 from './seasons/2006.csv';\nimport s2007 from './seasons/2007.csv';\nimport s2008 from './seasons/2008.csv';\nimport s2009 from './seasons/2009.csv';\nimport s2010 from './seasons/2010.csv';\nimport s2011 from './seasons/2011.csv';\nimport s2012 from './seasons/2012.csv';\nimport s2013 from './seasons/2013.csv';\nimport s2014 from './seasons/2014.csv';\nimport s2015 from './seasons/2015.csv';\nimport s2016 from './seasons/2016.csv';\nimport s2017 from './seasons/2017.csv';\nimport s2018 from './seasons/2018.csv';\nimport s2019 from './seasons/2019.csv';\nimport s2020 from './seasons/2020.csv';\n\nexport const PATHS = <const>{\n    '1991': s1991,\n    '1992': s1992,\n    '1993': s1993,\n    '1994': s1994,\n    '1995': s1995,\n    '1996': s1996,\n    '1997': s1997,\n    '1998': s1998,\n    '1999': s1999,\n    '2000': s2000,\n    '2001': s2001,\n    '2002': s2002,\n    '2003': s2003,\n    '2004': s2004,\n    '2005': s2005,\n    '2006': s2006,\n    '2007': s2007,\n    '2008': s2008,\n    '2009': s2009,\n    '2010': s2010,\n    '2011': s2011,\n    '2012': s2012,\n    '2013': s2013,\n    '2014': s2014,\n    '2015': s2015,\n    '2016': s2016,\n    '2017': s2017,\n    '2018': s2018,\n    '2019': s2019,\n    '2020': s2020,\n};\n","export default __webpack_public_path__ + \"static/media/1991.66ef7303.csv\";","export default __webpack_public_path__ + \"static/media/1992.f45a7f06.csv\";","export default __webpack_public_path__ + \"static/media/1993.662377f2.csv\";","export default __webpack_public_path__ + \"static/media/1994.0ad005fd.csv\";","export default __webpack_public_path__ + \"static/media/1995.bdb7db42.csv\";","export default __webpack_public_path__ + \"static/media/1996.b3a7bda8.csv\";","export default __webpack_public_path__ + \"static/media/1997.c2710fa3.csv\";","export default __webpack_public_path__ + \"static/media/1998.953713a0.csv\";","export default __webpack_public_path__ + \"static/media/1999.6ce162c0.csv\";","export default __webpack_public_path__ + \"static/media/2000.f897b906.csv\";","export default __webpack_public_path__ + \"static/media/2001.70a106b1.csv\";","export default __webpack_public_path__ + \"static/media/2002.833a473a.csv\";","export default __webpack_public_path__ + \"static/media/2003.c919582c.csv\";","export default __webpack_public_path__ + \"static/media/2004.9507689c.csv\";","export default __webpack_public_path__ + \"static/media/2005.fd39a638.csv\";","export default __webpack_public_path__ + \"static/media/2006.553b28a9.csv\";","export default __webpack_public_path__ + \"static/media/2007.a1ee5871.csv\";","export default __webpack_public_path__ + \"static/media/2008.0dd3f852.csv\";","export default __webpack_public_path__ + \"static/media/2009.06904a44.csv\";","export default __webpack_public_path__ + \"static/media/2010.5bc08fd5.csv\";","export default __webpack_public_path__ + \"static/media/2011.2026df6f.csv\";","export default __webpack_public_path__ + \"static/media/2012.44b9be33.csv\";","export default __webpack_public_path__ + \"static/media/2013.8531adcf.csv\";","export default __webpack_public_path__ + \"static/media/2014.1f2f0b16.csv\";","export default __webpack_public_path__ + \"static/media/2015.9deea0a0.csv\";","export default __webpack_public_path__ + \"static/media/2016.bd2d2e29.csv\";","export default __webpack_public_path__ + \"static/media/2017.31897bd3.csv\";","export default __webpack_public_path__ + \"static/media/2018.bcd8022a.csv\";","export default __webpack_public_path__ + \"static/media/2019.c445c74e.csv\";","export default __webpack_public_path__ + \"static/media/2020.2483c87c.csv\";","import { compose } from '@salik1992/fun-ts/dist/core';\nimport { filter, forEach, map } from '@salik1992/fun-ts/dist/array';\nimport { split } from '@salik1992/fun-ts/dist/string';\nimport { parseInt } from '@salik1992/fun-ts/dist/math';\nimport { Season, Driver } from './types';\n\nconst getValues = compose(\n    filter<string>((_, index) => index > 0),\n    split(','),\n);\n\nconst getResults = compose(\n    map<number, null | number>((result) => Number.isNaN(result) ? null : result),\n    map(parseInt()),\n);\n\nconst driverLineToDriver = (line: string): Driver => {\n    const [name, ...results] = split(',')(line);\n    return {\n        name,\n        results: getResults(results),\n        finishesCount: {},\n        position: 0,\n        points: 0,\n        pointsFromLastRace: 0,\n        isInPlayOff: false,\n        playOffPoints: 0,\n        playOffFinishesCount: {},\n    }\n}\n\nexport const parseSeason = (csv: string): Season => {\n    const [\n        yearLine,\n        pointsLine,\n        racesLine,\n        halfPointsLine,\n        fastestLapPointLine,\n        ...driversLines\n    ] = compose(filter<string>((_, index) => index !== 5), split('\\n'))(csv);\n    const year = parseInt()(getValues(yearLine)[0]);\n    const awardedPoints: Record<number, number> = {};\n    const points = compose(\n        map<number, number>((points) => Number.isNaN(points) ? 0 : points),\n        map<string, number>(parseInt()),\n        getValues,\n    )(pointsLine);\n    forEach<number>((points, index) => {\n        awardedPoints[index + 1] = points\n    })(points);\n    const races = getValues(racesLine);\n    const halfPoints = compose(\n        map((text) => text === 'YES'),\n        getValues,\n    )(halfPointsLine);\n    const fastestLapPoints = getValues(fastestLapPointLine);\n    const drivers = map(driverLineToDriver)(driversLines);\n    return {\n        year, awardedPoints, drivers, races, halfPoints, fastestLapPoints,\n    }\n};\n","import { PATHS } from './paths';\nimport { parseSeason } from './parser';\n\nexport const loadSeason = async (seasonYear: keyof typeof PATHS) => {\n    const csv = await (await fetch(PATHS[seasonYear])).text();\n    return parseSeason(csv);\n};\n","import { filter, forEach, sort } from '@salik1992/fun-ts/dist/array';\nimport { compose } from '@salik1992/fun-ts/dist/core';\nimport { Driver } from '../data';\n\nexport const regularDrivers = (driver: Driver) => !driver.isInPlayOff;\n\nexport const playoffDrivers = (driver: Driver) => driver.isInPlayOff;\n\nexport const orderDrivers = (drivers: Driver[]) => sort<Driver>((driverA, driverB) => {\n    const areBothInPlayoffs = driverA.isInPlayOff && driverB.isInPlayOff;\n    const points = areBothInPlayoffs ? 'playOffPoints' : 'points'\n    if (driverA[points] !== driverB[points]) return driverB[points] - driverA[points];\n    const finishesCount = areBothInPlayoffs ? 'playOffFinishesCount' : 'finishesCount'\n    let finishesAtPlace = 1;\n    while (\n        finishesAtPlace <= drivers.length\n        && driverA[finishesCount][finishesAtPlace] === driverB[finishesCount][finishesAtPlace]\n    ) {\n        finishesAtPlace += 1;\n    }\n    return driverB[finishesCount][finishesAtPlace] - driverA[finishesCount][finishesAtPlace];\n})(drivers);\n\nexport const wait = async (time: number) => new Promise<void>((resolve) => {\n    setTimeout(() => {\n        resolve();\n    }, time);\n});\n\nexport const positionDrivers = (drivers: Driver[]) => {\n    const orderedDrivers = orderDrivers([...drivers]);\n    forEach((driver: Driver) => {\n        driver.position = orderedDrivers.indexOf(driver);\n    })(drivers);\n    return drivers;\n};\n\nexport const getRegularDrivers = compose(positionDrivers, filter(regularDrivers));\n\nexport const getPlayOffDrivers = compose(positionDrivers, filter(playoffDrivers));\n\nexport const processRegularSeasonDriver = ({\n    awardedPoints, fastestLapPoints, pointsMultiplier, raceIndex,\n}: {\n    awardedPoints: Record<number, number>,\n    fastestLapPoints: string[],\n    pointsMultiplier: 1 | 0.5,\n    raceIndex: number,\n}) => (driver: Driver) => {\n    const result = driver.results[raceIndex];\n    const pointsForRace = (\n        result !== null\n            ? (awardedPoints[result] ?? 0) * pointsMultiplier\n            : 0\n    ) + (\n        driver.name === fastestLapPoints[raceIndex]\n            ? 1\n            : 0\n    );\n    driver.points += pointsForRace;\n    driver.pointsFromLastRace = pointsForRace;\n    if (result) {\n        if (!driver.finishesCount[result]) {\n            driver.finishesCount[result] = 1;\n        } else {\n            driver.finishesCount[result] += 1;\n        }\n    }\n    if (driver.isInPlayOff) {\n        driver.playOffPoints += pointsForRace;\n        if (result) {\n            if (!driver.playOffFinishesCount[result]) {\n                driver.playOffFinishesCount[result] = 1;\n            } else {\n                driver.playOffFinishesCount[result] += 1;\n            }\n        }\n    }\n};\n","import { forEach } from '@salik1992/fun-ts/dist/array';\nimport { Driver, loadSeason, PATHS, Season } from '../data';\nimport { SeasonController } from './interface';\nimport { getPlayOffDrivers, getRegularDrivers, processRegularSeasonDriver } from './utils';\n\nexport abstract class SeasonControllerBase implements SeasonController {\n    season: Season | null = null;\n\n    currentRace = 0;\n\n    setters = {\n        setRaceIndex: (_: number | ((_: number) => number)) => {},\n    };\n\n    destructed = false;\n\n    async init(season: keyof typeof PATHS) {\n        this.season = await loadSeason(season);\n        this.setters.setRaceIndex?.(this.currentRace);\n        this.race();\n    }\n\n    destruct() {\n        this.destructed = true;\n    }\n\n    getRace() {\n        return this.season!.races[this.currentRace]\n    }\n\n    getRegularDrivers() {\n        return getRegularDrivers(this.season!.drivers);\n    }\n\n    getPlayOffDrivers() {\n        return getPlayOffDrivers(this.season!.drivers);\n    }\n\n    isPlayOffRunning() {\n        return false;\n    }\n\n    addPoints() {\n        const { halfPoints, drivers, awardedPoints, fastestLapPoints } = this.season!;\n        const pointsMultiplier = halfPoints[this.currentRace] ? 0.5 : 1;\n        forEach<Driver>(processRegularSeasonDriver({\n            awardedPoints,\n            fastestLapPoints,\n            pointsMultiplier,\n            raceIndex: this.currentRace,\n        }))(drivers)\n    }\n\n    advanceRace() {\n        if (this.currentRace < this.season!.races.length - 1) {\n            this.currentRace += 1;\n            this.setters.setRaceIndex(this.currentRace);\n            this.race();\n        }\n    }\n\n    abstract race(): Promise<void>;\n}\n","import { SeasonControllerBase } from './SeasonControllerBase';\nimport { wait } from './utils';\nimport { RACE_LENGTH } from './constants';\n\nexport class F1Classic extends SeasonControllerBase {\n    async race() {\n        this.addPoints();\n        await wait(RACE_LENGTH);\n        if (this.destructed) return;\n        this.advanceRace();\n    }\n}\n","export const RACE_LENGTH = 3500;\n","import { forEach } from '@salik1992/fun-ts/dist/array';\nimport { SeasonControllerBase } from './SeasonControllerBase';\nimport { wait } from './utils';\nimport { RACE_LENGTH } from './constants';\nimport { Driver } from '../data';\n\nexport type PlayoffStage = Readonly<{\n    at: number,\n    cutoff: number,\n}>;\n\nexport abstract class SeasonControllerPlayoffBase extends SeasonControllerBase {\n    playoffStage = -1;\n\n    abstract playoffStages: PlayoffStage[];\n\n    isPlayOffRunning() {\n        return this.playoffStage >= 0;\n    }\n\n    async race() {\n        this.advancePlayoffs();\n        this.addPoints();\n        await wait(RACE_LENGTH);\n        if (this.destructed) return;\n        this.advanceRace();\n    }\n\n    private advancePlayoffs() {\n        if (this.playoffStage + 1 === this.playoffStages.length) return;\n        const currentPlayofStage = this.playoffStages[this.playoffStage + 1];\n        const isAtPlayoffStageStart = (\n            this.currentRace + currentPlayofStage.at === this.season!.races.length\n        );\n        if (isAtPlayoffStageStart) {\n            this.playoffStage += 1;\n            this.advanceDriversToPlayoff(currentPlayofStage.cutoff);\n        }\n    }\n\n    private advanceDriversToPlayoff(cutoffPosition: number) {\n        const drivers = this.playoffStage === 0\n            ? this.getRegularDrivers()\n            : this.getPlayOffDrivers();\n        forEach((driver: Driver) => {\n            driver.playOffPoints = 0;\n            driver.playOffFinishesCount = {};\n            driver.isInPlayOff = driver.position < cutoffPosition;\n        })(drivers)\n    }\n}\n","import { SeasonControllerPlayoffBase } from './SeasonControllerPlayoffBase';\n\nconst PLAYOFF_1 = <const>{\n    at: 7,\n    cutoff: 8,\n};\nconst PLAYOFF_2 = <const>{\n    at: 5,\n    cutoff: 6,\n};\nconst PLAYOFF_3 = <const>{\n    at: 3,\n    cutoff: 4,\n};\n\nexport class F1PlayOff extends SeasonControllerPlayoffBase {\n    playoffStages = [PLAYOFF_1, PLAYOFF_2, PLAYOFF_3]\n}\n","\nimport { SeasonControllerPlayoffBase } from './SeasonControllerPlayoffBase';\n\nconst PLAYOFF_1 = <const>{\n    at: 7,\n    cutoff: 12,\n};\nconst PLAYOFF_2 = <const>{\n    at: 4,\n    cutoff: 8,\n};\nconst PLAYOFF_3 = <const>{\n    at: 1,\n    cutoff: 4,\n};\n\nexport class NascarPlayOff extends SeasonControllerPlayoffBase {\n    playoffStages = [PLAYOFF_1, PLAYOFF_2, PLAYOFF_3]\n}\n\n\n","import { useState } from 'react';\nimport styled from 'styled-components';\nimport { Link, useParams } from 'react-router-dom';\nimport { map, reverse } from '@salik1992/fun-ts/dist/array';\nimport { PATHS } from '../data/paths';\nimport { Controllers } from '../controllers';\nimport { Params } from './types';\n\nconst SEASONS = reverse((Object.keys(PATHS)));\n\nconst TEXTS = {\n    [Controllers.F1_CLASSIC]: 'F1 Classic',\n    [Controllers.F1_PLAYOFF]: 'F1 Play Off',\n    [Controllers.NASCAR_PLAYOFF]: 'NASCAR Play Off',\n} as const;\n\nconst Wrapper = styled.div`\n    text-align: center;\n\n    a {\n        display: inline-block;\n        padding: 10px 20px;\n        background-color: #00dd00;\n        border: 1px solid #009900;\n        text-decoration: none;\n    }\n`;\n\ntype Props = {\n    season?: keyof typeof PATHS,\n    championshipStyle?: Controllers,\n}\n\nexport const SeasonPicker = ({\n    season: propsSeason, championshipStyle: propsChampionshipStyle,\n}: Props) => {\n    const {\n        season: initialSeason,\n        championshipStyle: initialChampionshipStyle,\n    } = useParams<Params>();\n\n    const [season, setSeason] = useState(propsSeason || initialSeason || SEASONS[0])\n    const [championshipStyle, setChampionshipStyle] = useState(\n        propsChampionshipStyle || initialChampionshipStyle || Controllers.F1_CLASSIC\n    );\n\n    return (\n        <Wrapper>\n            <select\n                value={season}\n                onChange={(e) => setSeason(e.target.value as keyof typeof PATHS)}\n            >\n                {map<string, JSX.Element>((season) => (\n                    <option key={`season-picker-${season}`} value={season}>\n                        {season}\n                    </option>\n                ))(SEASONS)}\n            </select>\n            <select\n                value={championshipStyle}\n                onChange={(e) => setChampionshipStyle(e.target.value as Controllers)}\n            >\n                {map<Controllers, JSX.Element>((controller) => (\n                    <option key={`season-picker-${controller}`} value={controller}>\n                        {TEXTS[controller]}\n                    </option>\n                ))(Object.keys(TEXTS) as Controllers[])}\n            </select>\n            <br />\n            <Link to={`/${season}/${championshipStyle}`}>\n                Run the season\n            </Link>\n        </Wrapper>\n    )\n};\n","import styled from 'styled-components';\n\nconst LINE_HEIGHT = 1.75;\n\nexport const H1 = styled.h1`\n    margin: 50px 20px 20px 20px;\n    text-align: center;\n`\n\nexport const H2 = styled.h2`\n    margin: 40px 20px 20px 20px;\n    text-align: left;\n`;\n\nexport const P = styled.p`\n    margin: 10px 20px 20px 20px;\n    line-height: ${LINE_HEIGHT}em;\n`\n\nexport const Ul = styled.ul`\n    margin: auto 20px;\n    line-height: ${LINE_HEIGHT}em;\n`;\n\nexport const Li = styled.li`\n    line-height: ${LINE_HEIGHT}em;\n`;\n","import { Link } from 'react-router-dom';\nimport { Controllers } from '../controllers';\nimport { SeasonPicker } from './SeasonPicker';\nimport { H1, P, Ul, Li } from './Texts';\n\nexport const InfoF1Playoff = () => (\n    <>\n        <H1>Interesting facts about Fictional F1 Playoff results</H1>\n        <P>\n            For full rules, refer to the <Link to=\"/\">main page</Link>.\n        </P>\n        <P>\n            This is, of course, only guesstimate as we cannot simulate different decisions like\n            driving for win instead of saving car towards the end of the season. Or letting teammate\n            win so he would stay in the team for next year, etc.\n        </P>\n        <P>\n            This takes into account only different scoring system. Nothing more.\n        </P>\n        <Ul>\n            <Li>\n                Out of 30 seasons 15 would have the same champion.\n            </Li>\n            <Li>\n                No champion of this era would loose champion status.\n            </Li>\n            <Li>\n                Lewis Hamilton would won 1 less championship (6 in total) and some of them\n                in different years.\n            </Li>\n            <Li>\n                Michael Schumacher would be only 3 time world champion (1995, 2000, 2001).\n            </Li>\n            <Li>\n                There would be a new world champion in 1992, Martin Brundle.\n            </Li>\n            <Li>\n                In 2008 the controversial victory of Fernando Alonso in Singapore would gain him\n                a 2nd championship win out of 3. (2006, 2008 and 2012).\n            </Li>\n            <Li>\n                Jenson Button would be crowned a champion in 2011 not 2009.\n            </Li>\n            <Li>\n                Kimi Raikkonen would be 3 time world champion (2003, 2005, 2007).\n            </Li>\n            <Li>\n                Sebastien Vettel would be only 2 time world champion in 2009 and 2013.\n            </Li>\n            <Li>\n                Nico Rosberg would win the championship in 2015 instead of 2016.\n            </Li>\n            <Li>\n                There would be a new champion in 2017, Valtteri Bottas.\n            </Li>\n        </Ul>\n        <SeasonPicker championshipStyle={Controllers.F1_PLAYOFF} />\n    </>\n);\n","import { Link } from 'react-router-dom';\nimport { Controllers } from '../controllers';\nimport { SeasonPicker } from './SeasonPicker';\nimport { H1, P, Ul, Li } from './Texts';\n\nexport const InfoNascarPlayoff = () => (\n    <>\n        <H1>Interesting facts about fictional F1 NASCAR-like Playoff results</H1>\n        <P>\n            For full rules, refer to the <Link to=\"/\">main page</Link>.\n        </P>\n        <P>\n            This is, of course, only guesstimate as we cannot simulate different decisions like\n            driving for win instead of saving car towards the end of the season. Or letting teammate\n            win so he would stay in the team for next year, etc.\n        </P>\n        <P>\n            This takes into account only different scoring system. Nothing more.\n        </P>\n        <Ul>\n            <Li>\n                Out of 30 seasons 15 would have the same champion.\n            </Li>\n            <Li>\n                Nigel Mansell nor Damon Hill would have become champions.\n            </Li>\n            <Li>\n                Lewis Hamilton would be only 4 time champion (2014, 2016, 2018, 2019).\n            </Li>\n            <Li>\n                Michael Schumacher would be only 3 time world champion (2000, 2001, 2002).\n            </Li>\n            <Li>\n                There would be several new world champions:\n                <Ul>\n                    <Li>Gerhard Berger - 1992</Li>\n                    <Li>Jean Alesi - 1994</Li>\n                    <Li>David Coulthard - 1995</Li>\n                    <Li>Eddie Irvine - 1999</Li>\n                    <Li>Juan Pablo Montoya - 2004</Li>\n                    <Li>Felipe Massa - 2008</Li>\n                    <Li>Valtteri Bottas - 2017</Li>\n                    <Li>Max Verstappen - 2020</Li>\n                </Ul>\n            </Li>\n            <Li>\n                Jenson Button would be crowned a champion in 2012 not 2009.\n            </Li>\n            <Li>\n                Kimi Raikkonen would be 2 time world champion (2003, 2007).\n            </Li>\n            <Li>\n                Sebastien Vettel would still be 4 time world champion, only swapping\n                years 2009 and 2012 with Jenson Button.\n            </Li>\n            <Li>\n                Nico Rosberg would win the championship in 2015 instead of 2016.\n            </Li>\n        </Ul>\n        <SeasonPicker championshipStyle={Controllers.NASCAR_PLAYOFF} />\n    </>\n);\n","import { Link } from 'react-router-dom';\nimport { Controllers } from '../controllers';\nimport { SeasonPicker } from './SeasonPicker';\nimport { H1, H2, P, Ul, Li } from './Texts';\n\nexport const Intro = () => (\n    <>\n        <H1>What If F1 used Play Off style championship</H1>\n        <P>\n            This small webpage allows to simulate running F1 seasons spanning from 1991\n            to 2020 under rules that use play off style championship similar to current\n            NASCAR but slightly less \"aggressive\".\n        </P>\n        <P>\n            The NASCAR style play off rules are also available for picking.\n        </P>\n        <H2>Motivation</H2>\n        <P>\n            The goal of this exercise is to discover and show what implications it might\n            have on the known scenarios. There are some pros and cons to this approach.\n            The main advantage might be a nearly guaranteed fight to the last race.\n            The main disadvantage would be an unfair result if the driver who dominated the main\n            part of the season would loose because of two unlucky races.\n        </P>\n        <SeasonPicker />\n        <H2>Fictional F1 Play Off Rules</H2>\n        <P>\n            The begining of the season is same to the current F1 rules. But towards the\n            end there are some changes:\n        </P>\n        <Ul>\n            <Li>\n                7 races before the end of the season the top 8 drivers are promoted to the\n                play off stage. The rest of the field continues fighting for positions\n                but cannot reach the play off and thus championship win anymore.\n            </Li>\n            <Li>\n                All drivers still accumulate points the same as before the play off.\n                Drivers in the top 8 have also their own group in which they start\n                from 0.\n            </Li>\n            <Li>\n                After 2 races (5 races to the end) 7th and 8th placed drivers in the\n                play off group are eliminated and join back the rest of the field.\n            </Li>\n            <Li>\n                The remaining top 6 have the points reset again and they start from 0.\n            </Li>\n            <Li>\n                After 2 more races (3 races to the end) 5th and 6th placed drivers\n                in the play off group are eliminated and join back the rest of the field.\n            </Li>\n            <Li>\n                Remaining top 4 drivers get points reset once more and have a de facto\n                3 race long championship which decides the overall winner.\n            </Li>\n            <Li>\n                The final order in the championship is decided:\n                <Ul>\n                    <Li>\n                        For top 4 by their order in the final stage group.\n                    </Li>\n                    <Li>\n                        For the rest of the field by the overall points accumulated.\n                    </Li>\n                </Ul>\n            </Li>\n            <Li>\n                <Link to=\"/info/F1_PLAYOFF\">See interesting facts</Link> or pick any season to run:\n            </Li>\n        </Ul>\n        <SeasonPicker championshipStyle={Controllers.F1_PLAYOFF} />\n        <H2>NASCAR like Play off rules</H2>\n        <P>\n            These are not exact as done in NASCAR, but close and they are more extreme.\n        </P>\n        <Ul>\n            <Li>\n                7 races before the end top 12 drivers are promoted to the play off group.\n            </Li>\n            <Li>\n                After 3 races (4 races before the end) last 4 drivers of the play off group\n                are eliminated. And the points get reset.\n            </Li>\n            <Li>\n                After another 3 races (1 race before the end) next 4 drivers are eliminated.\n                And the points get reset.\n            </Li>\n            <Li>\n                Top 4 have 1 race that decides it all.\n            </Li>\n            <Li>\n                <Link to=\"/info/NASCAR_PLAYOFF\">See interesting facts</Link> or pick any season to run:\n            </Li>\n        </Ul>\n        <SeasonPicker championshipStyle={Controllers.NASCAR_PLAYOFF} />\n    </>\n);\n","import styled from \"styled-components\";\nimport { Driver } from \"../data\";\n\ntype Props = {\n    offsetIndex: number,\n    driver: Driver,\n    isInPlayoff?: true,\n    playoffRunners?: number,\n}\n\nexport const HEIGHT = 50;\n\nconst DriverWrap = styled.div`\n    position: absolute;\n    display: flex;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: ${HEIGHT}px;\n    line-height: ${HEIGHT}px;\n    color: #ffffff;\n    background-image: linear-gradient(to top, #000000, #222222);\n    transition: transform 800ms;\n\n    .name {\n        flex: 1;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n\n    .position, .points, .points-from-last-race {\n        padding: 0 20px;\n        min-width: 40px;\n        font-weight: bold;\n    }\n\n    .position {\n        text-align: center;\n    }\n\n    .points, .points-from-last-race {\n        text-align: right;\n    }\n\n    .points-from-last-race {\n        color: #00aa00;\n\n        &.points-0 {\n            color: #999999;\n        }\n    }\n`;\n\nexport const DriverView = ({\n    offsetIndex, isInPlayoff, playoffRunners = 0, driver: {\n        position, name, points, playOffPoints, pointsFromLastRace,\n    } }: Props) => (\n    <DriverWrap style={{ transform: `translateY(${offsetIndex * HEIGHT}px)` }}>\n        <div className=\"position\">\n            {position + 1 + (!isInPlayoff ? playoffRunners : 0)}\n        </div>\n        <div className=\"name\">\n            {name}\n        </div>\n        <div className=\"points\">\n            {isInPlayoff ? playOffPoints : points}\n        </div>\n        <div className={`points-from-last-race points-${pointsFromLastRace}`}>\n            +{pointsFromLastRace}\n        </div>\n    </DriverWrap>\n);\n","import styled from 'styled-components';\nimport { HEIGHT } from './Driver';\n\ntype Props = {\n    offset?: number,\n};\n\nexport const DriversGroup = styled.div<Props>`\n    position: relative;\n    top: ${({ offset }) => (offset ?? 0) * HEIGHT}px;\n    margin-bottom: 30px;\n`;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { map } from '../../node_modules/@salik1992/fun-ts/dist/array';\nimport { getController } from '../controllers';\nimport { SeasonController } from '../controllers/interface';\nimport { Driver } from '../data';\nimport { DriverView } from './Driver';\nimport { DriversGroup } from './DriversGroup';\nimport { SeasonPicker } from './SeasonPicker';\nimport { H1, H2 } from './Texts';\nimport { Params } from './types';\n\ntype RaceState = {\n    race: string,\n    regularDrivers: Driver[],\n    playoffDrivers: Driver[],\n    isPlayoffRunning: boolean,\n};\n\nconst ResultsWrap = styled.div<{ driversLength: number }>`\n    height: ${({ driversLength }) => driversLength * 50 + 100}px;\n`;\n\nexport const SeasonRunner = () => {\n    const { season, championshipStyle } = useParams<Params>();\n\n    const [controller, setController] = useState<SeasonController | null>(null);\n\n    const [raceIndex, setRaceIndex] = useState(-1);\n    const [raceState, setRaceState] = useState<RaceState>({\n        race: '',\n        regularDrivers: [],\n        playoffDrivers: [],\n        isPlayoffRunning: false,\n    });\n\n    useEffect(() => () => {\n        controller?.destruct();\n    }, []);\n\n    useEffect(() => {\n        if (!controller) return;\n        controller.init(season)\n        controller.setters = {\n            setRaceIndex,\n        }\n    }, [season, controller]);\n\n    useEffect(() => {\n        if (!controller || controller.destructed) return;\n        setRaceState({\n            race: controller.getRace(),\n            regularDrivers: controller.getRegularDrivers(),\n            playoffDrivers: controller.getPlayOffDrivers(),\n            isPlayoffRunning: controller.isPlayOffRunning(),\n        });\n    }, [raceIndex])\n\n    useEffect(() => {\n        controller?.destruct();\n        setController(getController(championshipStyle))\n    }, [season, championshipStyle]);\n\n    return (\n        <>\n            <SeasonPicker />\n            <H1>Season - {season}</H1>\n            <H1>Race {raceIndex + 1}: {raceState.race}</H1>\n            <ResultsWrap\n                driversLength={(\n                    raceState.playoffDrivers.length + raceState.regularDrivers.length\n                )}\n            >\n                {raceState.isPlayoffRunning && (\n                    <>\n                        <H2>Playoff Group</H2>\n                        <DriversGroup>\n                            {map((driver: Driver) => (\n                                <DriverView\n                                    key={driver.name}\n                                    offsetIndex={driver.position}\n                                    driver={driver}\n                                    isInPlayoff\n                                />\n                            ))(raceState.playoffDrivers)}\n                        </DriversGroup>\n                    </>\n                )}\n                <DriversGroup offset={raceState.playoffDrivers.length}>\n                    {map((driver: Driver) => (\n                        <DriverView\n                            key={driver.name}\n                            offsetIndex={driver.position}\n                            driver={driver}\n                            playoffRunners={raceState.playoffDrivers.length}\n                        />\n                    ))(raceState.regularDrivers)}\n                </DriversGroup>\n            </ResultsWrap>\n        </>\n    )\n};\n","import {\n    HashRouter,\n    Route,\n    Switch,\n} from 'react-router-dom';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { Footer } from './Footer';\nimport { Header } from './Header';\nimport { InfoF1Playoff } from './InfoF1Playoff';\nimport { InfoNascarPlayoff } from './InfoNascarPlayoff';\nimport { Intro } from './Intro';\nimport { SeasonRunner } from './SeasonRunner';\n\nconst Wrap = styled.div`\n    margin: auto;\n    width: 100%;\n    max-width: 1240px;\n    margin-bottom: 200px;\n`;\n\nconst Styles = createGlobalStyle`\n    * {\n        font-family: 'Helvetica', 'Roboto', 'Segoe UI', sans;\n    }\n    html, body {\n        margin: 0;\n        padding: 0;\n    }\n    #root {\n        margin-bottom: 70px;\n    }\n`\n\nexport const App = () => {\n    return (\n        <HashRouter>\n            <Header />\n            <Wrap>\n                <Styles />\n                    <Switch>\n                        <Route path=\"/info/F1_PLAYOFF\" component={InfoF1Playoff} />\n                        <Route path=\"/info/NASCAR_PLAYOFF\" component={InfoNascarPlayoff} />\n                        <Route path=\"/:season/:championshipStyle\" component={SeasonRunner} />\n                        <Route path=\"/\" component={Intro} />\n                    </Switch>\n            </Wrap>\n            <Footer />\n        </HashRouter>\n    );\n};\n","import { StrictMode } from 'react';\nimport { render } from 'react-dom';\nimport { App } from './components/App';\n// import reportWebVitals from './reportWebVitals';\n\nrender(\n    <StrictMode>\n        <App />\n    </StrictMode>,\n    document.getElementById('root')\n);\n\n// reportWebVitals(console.log);\n"],"sourceRoot":""}